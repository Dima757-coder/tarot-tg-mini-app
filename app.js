document.addEventListener("DOMContentLoaded", () => {
  const container = document.getElementById("card-container");
  const tg = window.Telegram.WebApp;
  tg.ready();

  let selectedCards = [];
  const totalCardsToShow = 6;
  let usedCards = [];

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç
  container.innerHTML = '';

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
  for (let i = 0; i < totalCardsToShow; i++) {
    const card = document.createElement("div");
    card.classList.add("card");
    card.dataset.id = i;

    card.innerHTML = `
      <div class="card-inner">
        <div class="card-front"></div>
        <div class="card-back"></div>
      </div>
    `;

    card.addEventListener("click", () => selectCard(card));
    container.appendChild(card);
  }

  function selectCard(card) {
    if (selectedCards.includes(card)) return;

    if (selectedCards.length >= 3) {
      alert("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –∫–∞—Ä—Ç—ã");
      return;
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
    let availableCards = tarotCards.filter(c => !usedCards.includes(c.name));
    if (availableCards.length === 0) {
      alert("–í—Å–µ –∫–∞—Ä—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
      return;
    }

    let meaning = shuffleArray(availableCards)[0];
    usedCards.push(meaning.name);
    selectedCards.push(card);
    card.classList.add("selected");

    const isReversed = Math.random() < 0.5;
    const back = card.querySelector(".card-back");
    
    back.innerHTML = `
      <img src="${isReversed ? meaning.image_url_down : meaning.image_url_up}" 
           alt="${meaning.name}" 
           style="width: 100%; height: auto; max-height: 75%; border-radius: 10px;">
      <p>${meaning.name}</p>
      <small>${isReversed ? '(–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '(–ü—Ä—è–º–∞—è)'}</small>
    `;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤ dataset
    card.dataset.position = isReversed ? 'reversed' : 'upright';

    setTimeout(() => {
      card.classList.add("flipped");
    }, 100);

    if (selectedCards.length === 3) {
      showContinueButton();
    }
  }

  function showContinueButton() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const oldBtn = document.getElementById("continue-btn");
    if (oldBtn) oldBtn.remove();

    const btn = document.createElement("button");
    btn.textContent = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å";
    btn.id = "continue-btn";
    btn.style.marginTop = "60px";
    btn.style.padding = "12px 20px";
    btn.style.fontSize = "16px";
    btn.style.backgroundColor = "#4CAF50";
    btn.style.color = "white";
    btn.style.border = "none";
    btn.style.borderRadius = "5px";
    btn.style.cursor = "pointer";

    btn.addEventListener("click", () => {
      const selectedCardsData = selectedCards.map((card) => {
        return {
          name: card.querySelector(".card-back p").textContent,
          position: card.dataset.position
        };
      });

      console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", { cards: selectedCardsData });
      tg.sendData(JSON.stringify({ cards: selectedCardsData }));

      setTimeout(() => {
      }, 500);
    });

    document.body.appendChild(btn);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
  function shuffleArray(array) {
    return array.sort(() => Math.random() - 0.5);
  }
});
